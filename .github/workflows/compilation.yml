name: CI

on:
  push:
  pull_request:
  repository_dispatch:
    types: [run_build]
  workflow_dispatch: {}

jobs:
  build:
    runs-on: ${{ matrix.os[0] }}
    strategy:
      matrix:
        os: [[macos-latest, bash], [ubuntu-latest, bash], [windows-latest, msys2], [windows-2019, bash]]
      fail-fast: false
    defaults:
     run:
      shell: ${{ matrix.os[1] }} {0}

    steps:
    # checkout action uses the native git (we can avoid this messing up line
    # endings, but this could still be dangerous e.g if we need symlinks in the
    # repo)
    - name: avoid messing up line endings
      if: matrix.os[0] == 'windows-2019'
      run: git config --global core.autocrlf input
    
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # install cygwin and build tools
    - name: Install Cygwin
      if: matrix.os[0] == 'windows-2019'
      uses: cygwin/cygwin-install-action@master
      with:
        platform: x86_64
        packages: >-
          autoconf,
          automake,
          bison,
          busybox,
          cmake,
          flex,
          gcc-g++,
          git,
          gettext-devel,
          libgmp-devel,
          libmpc-devel,
          libmpfr-devel,
          make,
          patch,
          perl,
          texinfo,
          wget,
          zlib-devel
          echo "MSYSTEM=x64" >> $GITHUB_ENV
          
    - name: Install Ubuntu packages
      if: matrix.os[0] == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get -y install texinfo bison flex gettext libgmp3-dev libmpfr-dev libmpc-dev
        echo "MSYSTEM=x64" >> $GITHUB_ENV

    - name: Install macOS packages
      if: matrix.os[0] == 'macos-latest'
      run: |
        brew update
        brew install texinfo bison flex gnu-sed gsl gmp mpfr libmpc
        echo "MSYSTEM=x64" >> $GITHUB_ENV

    - name: Install MSYS2 packages
      if: matrix.os[0] == 'windows-latest'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW32
        install: |
          base-devel git make texinfo flex bison patch binutils mingw-w64-i686-gcc mpc-devel tar
          mingw-w64-i686-cmake mingw-w64-i686-make mingw-w64-i686-libogg
        update: true
        shell: msys2 {0}

    - name: Runs all the stages in the shell (Ubuntu, Macos and Windows latest)
      if: matrix.os[0] == 'ubuntu-latest' || matrix.os[0] == 'macos-latest' || matrix.os[0] == 'windows-latest'
      continue-on-error: true
      run: |
        export PS2DEV=$PWD/ps2dev
        export PS2SDK=$PS2DEV/ps2sdk
        export GSKIT=$PS2DEV/gsKit
        export PATH="/usr/local/opt/gnu-sed/libexec/gnubin:$PATH"
        export PATH="/usr/local/opt/bison/bin:$PATH"
        export PATH=$PATH:$PS2DEV/bin:$PS2DEV/ee/bin:$PS2DEV/iop/bin:$PS2DEV/dvp/bin:$PS2SDK/bin
        ./build-all.sh

    - name: Runs all the stages in the shell (Windows 2019 Cygwin)
      if: matrix.os[0] == 'windows-2019'
      continue-on-error: true
      run: >-
        export PATH=/usr/bin:$(cygpath ${SYSTEMROOT})/system32 &&
        export PS2DEV=$PWD/ps2dev &&
        export PS2SDK=$PS2DEV/ps2sdk &&
        export GSKIT=$PS2DEV/gsKit &&
        export PATH=$PATH:$PS2DEV/bin:$PS2DEV/ee/bin:$PS2DEV/iop/bin:$PS2DEV/dvp/bin:$PS2SDK/bin &&
        (./build-all.sh)
      shell: C:\cygwin\bin\bash.exe --noprofile --norc -eo pipefail '{0}'
      
    - name: Get short SHA
      id: slug
      run: echo "sha8=${MSYSTEM}-sha[$(echo ${GITHUB_SHA} | cut -c1-8)" >> $GITHUB_OUTPUT

    - name: Prepare ps2dev folder  (Ubuntu, Macos and Windows latest)
      if: matrix.os[0] == 'ubuntu-latest' || matrix.os[0] == 'macos-latest' || matrix.os[0] == 'windows-latest'
      run: |
        tar -zcvf ps2dev-${{matrix.os[0]}}.tar.gz ps2dev

    - name: Prepare ps2dev folder (Windows 2019 cygwin)
      if: matrix.os[0] == 'windows-2019'
      run: > -
        export PATH=/usr/bin:$(cygpath ${SYSTEMROOT})/system32 &&
        (tar -zcvf ps2dev-${{matrix.os[0]}}.tar.gz ps2dev)
      shell: C:\cygwin\bin\bash.exe --noprofile --norc -eo pipefail '{0}'
      
    - uses: actions/upload-artifact@v3
      with:
        name: ps2dev-${{matrix.os[0]}}-${{ steps.slug.outputs.sha8 }}
        path: ps2dev-${{matrix.os[0]}}.tar.gz

    - name: Extract tag name
      if: startsWith(github.ref, 'refs/tags/')
      id: tag
      run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT

    - name: Create pre-release
      if: github.ref == 'refs/heads/master'
      uses: softprops/action-gh-release@v1
      with:
        files: ps2dev-${{matrix.os[0]}}.tar.gz
        prerelease: true
        name: "Development build"
        tag_name: "latest"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: ps2dev-${{matrix.os[0]}}.tar.gz
        tag_name: ${{ steps.tag.outputs.VERSION }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Avoid action/checkout post-run steps using Cygwin git
      if: matrix.os[0] == 'windows-2019'
      run: bash -c 'rm /usr/bin/git.exe'
